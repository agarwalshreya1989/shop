import datetime

from django.db import models
from apps.account.models import User
GENDER =(
    ('M', 'Male'),
    ('F', 'Female'),
)

class Base(models.Model):
    created_on = models.DateTimeField(blank=True, null=True, auto_now_add=True, editable=False)
    created_by = models.ForeignKey(User, blank=True, null=True, related_name='+', editable=False)
    created_from = models.CharField(max_length=15, blank=True, null=True, editable=False)

    last_modified_on = models.DateTimeField(blank=True, null=True, default=datetime.datetime.now(), editable=False)
    last_modified_by = models.ForeignKey(User, blank=True, null=True, related_name='+', editable=False)
    last_modified_from = models.CharField(max_length=15, blank=True, null=True, editable=False)

    class Meta:
        abstract = True
       
  
class Address(models.Model):
  
    adress = models.CharField(max_length=100, blank=True, null=True)
    zipcode = models.CharField( max_length=12, blank=True, null=True)
    city = models.CharField( max_length=100, blank=False, null=False)
    state = models.CharField(max_length=100, blank=True, null=True)
    country = models.CharField( max_length=12, blank=True, null=True)
    landmark = models.CharField( max_length=80, blank=True, null=True)
    guiding_directions = models.CharField(max_length=200, blank=True, null=True)
    computed_address = models.CharField(max_length=200, blank=True, null=True)
    longitude = models.DecimalField(max_digits=8, decimal_places=5, blank=True, null=True)
    latitude = models.DecimalField(max_digits=8, decimal_places=5, blank=True, null=True)
    geocode_error = models.BooleanField(default=False, blank=False, null=False)
   
  
    def __unicode__(self):
        return ', '.join(filter(None, [self.city, self.state, self.zipcode, unicode(self.country)]))

    def full(self, delimiter=','):
        return delimiter.join(filter(None, [self.street_line1, self.street_line2, self.city, self.state, self.zipcode, unicode(self.country)]))

    @property
    def full_br(self):
        return self.full('<br>')

    class Meta:
        verbose_name_plural = 'Addresses'
        ordering = ('pk',)     
        abstract = True   
